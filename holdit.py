import re
import random
from io import BytesIO
from PIL import Image, ImageDraw
from flask import Flask, abort, send_file, render_template

app = Flask(__name__)


@app.route('/')
def index():
    return render_template('index.html')


def generate_image(dimensions, color=None, text=None):
    colors = ['f44336', 'e91e63', '9c27b0', '673ab7', '3f51b5', '2196f3', '03a9f4', '00bcd4', '009688', '4caf50',
              '8bc34a', 'cddc39', 'ffeb3b', 'ffc107', 'ff9800', 'ff5722', '795548', '9e9e9e', '607d8b']
    sizes = [int(s) for s in re.findall(r'\d+', dimensions)]
    if len(sizes) != 2:
        abort(404)
    width = sizes[0]
    height = sizes[1]
    if color:
        color_match = re.search(r'(?:[0-9a-fA-F]{3}){1,2}$', color)
        if color_match:
            clr = '#' + color
        else:
            clr = '#' + random.choice(colors)
    else:
        clr = '#' + random.choice(colors)
    content = BytesIO()
    image = Image.new('RGB', (width, height), clr)
    draw = ImageDraw.Draw(image)
    text = text if text else '{} X {}'.format(width, height)
    copy = 'Generated by Holdit'
    text_width, text_height = draw.textsize(text)
    copy_width, copy_height = draw.textsize(copy)
    if text_width < width and text_height < height:
        text_top = (height - text_height) // 2
        text_left = (width - text_width) // 2
        copy_left = (width - copy_width) // 2
        copy_top = (height - copy_height) * .9
        draw.text((text_left, text_top), text, fill=(255, 255, 255))
        draw.text((copy_left, copy_top), copy, fill=(255, 255, 255))
        image.save(content, 'PNG')
        content.seek(0)
        return send_file(content, mimetype='image/png')


@app.route('/<string:dimensions>/<string:color>/<string:text>')
def generate_image_dimensions_color_text(dimensions, color, text):
    return generate_image(dimensions, color, text)


@app.route('/<string:dimensions>/<string:color>')
def generate_image_dimensions_color(dimensions, color):
    return generate_image(dimensions, color)


@app.route('/<string:dimensions>/')
def generate_image_dimensions(dimensions):
    return generate_image(dimensions)


@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404

if __name__ == '__main__':
    app.run(debug=True)
